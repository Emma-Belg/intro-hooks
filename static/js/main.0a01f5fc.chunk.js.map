{"version":3,"sources":["components/TodoList.js","components/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["Todo","index","todo","completeTodo","deleteTodo","className","style","textDecoration","isCompleted","text","onClick","ToDoForm","addTodo","useState","value","setValue","onSubmit","eventPeram","preventDefault","type","placeholder","onChange","event","target","App","todos","setTodos","newTodos","splice","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2RA8BeA,MAdf,YAAwD,IAAzCC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,aAAcC,EAAa,EAAbA,WACtC,OACI,yBAAKC,UAAU,OACVC,MAAO,CAACC,eAAgBL,EAAKM,YAAc,eAAiB,KAE5DN,EAAKO,KACN,6BACI,4BAAQJ,UAAU,WAAWK,QAAS,kBAAMP,EAAaF,KAAzD,YACA,4BAAQI,UAAU,SAASK,QAAS,kBAAMN,EAAWH,KAArD,aCIDU,MAxBf,YAA8B,IAAXC,EAAU,EAAVA,QAAU,EACCC,mBAAS,IADV,mBAClBC,EADkB,KACXC,EADW,KAYzB,OACI,0BAAMC,SAVW,SAAAC,GACjBA,EAAWC,iBAENJ,IAELF,EAAQE,GAERC,EAAS,OAIL,2BAAOI,KAAK,OACLd,UAAU,QACVe,YAAY,sBACZN,MAAOA,EACPO,SAAU,SAAAC,GAAK,OAAIP,EAASO,EAAMC,OAAOT,YCuC7CU,MAxDf,WAAe,MAIeX,mBAAS,CAC/B,CACIJ,KAAM,oBACND,aAAa,GAEjB,CACIC,KAAM,wBACND,aAAa,GAEjB,CACIC,KAAM,iBACND,aAAa,KAfV,mBAIJiB,EAJI,KAIGC,EAJH,KA0BLvB,EAAe,SAAAF,GACjB,IAAM0B,EAAQ,YAAOF,GACrBE,EAAS1B,GAAOO,aAAc,EAC9BkB,EAASC,IAGPvB,EAAa,SAAAH,GACf,IAAM0B,EAAQ,YAAOF,GACrBE,EAASC,OAAO3B,EAAO,GACvByB,EAASC,IAGb,OACI,yBAAKtB,UAAU,OACX,yBAAKA,UAAU,aACVoB,EAAMI,KAAI,SAAC3B,EAAMD,GAAP,OACP,kBAAC,EAAD,CACI6B,IAAK7B,EACLA,MAAOA,EACPC,KAAMA,EACNC,aAAcA,EACdC,WAAYA,OAGpB,kBAAC,EAAD,CAAUQ,QA/BN,SAAAH,GAEZ,IAAMkB,EAAQ,sBAAOF,GAAP,CAAc,CAAChB,UAE7BiB,EAASC,SChBGI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0a01f5fc.chunk.js","sourcesContent":["import React from 'react';\nimport './Todolist.css';\nimport '../App.css';\n\n//inside the function brackets is where you could use props or you could use a destructuring declaration\n//Here it is with props (i think)\n/*function Todo(props) {\n    return (\n        <div className=\"todo\">\n            props.index;\n            props.todo\n        </div>\n    )\n}*/\n    \n//here it is with destructuring\nfunction Todo({index, todo, completeTodo, deleteTodo}) {\n    return (\n        <div className=\"todo\"\n             style={{textDecoration: todo.isCompleted ? 'line-through' : ''}}\n        >\n            {todo.text}\n            <div>\n                <button className=\"complete\" onClick={() => completeTodo(index)}>Complete</button>\n                <button className=\"delete\" onClick={() => deleteTodo(index)}>Delete</button>\n            </div>\n        </div>\n    );\n}\n\nexport default Todo;","import React, {useState} from 'react';\nimport './Todolist.css';\nimport '../App.css';\n\nfunction ToDoForm({addTodo}) {\n    const [value, setValue] = useState('');\n\n    const handleSubmit = eventPeram => {\n        eventPeram.preventDefault();\n        //this line means you can't submit an empty value\n        if (!value) return;\n        //this will be passed in as a prop\n        addTodo(value);\n        //then to clear the form after use\n        setValue('');\n    }\n    return (\n        <form onSubmit={handleSubmit}>\n            <input type=\"text\"\n                   className=\"input\"\n                   placeholder=\"Add your to do task\"\n                   value={value}\n                   onChange={event => setValue(event.target.value)}\n            />\n        </form>\n    )\n}\n\nexport default ToDoForm;","import React, {useState} from 'react';\nimport Todo from \"./components/TodoList\";\nimport ToDoForm from \"./components/TodoForm\";\nimport \"./App.css\";\n\nfunction App() {\n    //creating state - this has two components/variables\n    //the 1st is the value of the state. and can be thought of as \"this.state\" from the older Class component system\n    //the 2nd: a function to update the state. This can be thought of as \"this.setState from the old class component way\n    const [todos, setTodos] = useState([\n        {\n            text: 'Learn about hooks',\n            isCompleted: false,\n        },\n        {\n            text: 'Meet friend for lunch',\n            isCompleted: false,\n        },\n        {\n            text: 'Build cool app',\n            isCompleted: false,\n        }\n    ]);\n\n    const addTodo = text => {\n        //using a spread operator (with the dots) to copy everything that is already there and then adding the input text\n        const newTodos = [...todos, {text}];\n        //set Todos is used to update the state\n        setTodos(newTodos);\n    };\n\n    const completeTodo = index => {\n        const newTodos = [...todos];\n        newTodos[index].isCompleted = true;\n        setTodos(newTodos);\n    }\n\n    const deleteTodo = index => {\n        const newTodos = [...todos];\n        newTodos.splice(index, 1);\n        setTodos(newTodos);\n    }\n\n    return (\n        <div className=\"app\">\n            <div className=\"todo-list\">\n                {todos.map((todo, index) => (\n                    <Todo\n                        key={index}\n                        index={index}\n                        todo={todo}\n                        completeTodo={completeTodo}\n                        deleteTodo={deleteTodo}\n                    />\n                ))}\n                <ToDoForm addTodo={addTodo}/>\n            </div>\n        </div>\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}